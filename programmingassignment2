# Programming Assignment 2 

## This function creates a special "matrix" object that can cache its inverse.

makeCacheMatrix <- function(x = matrix()) { 
        ## initialize inverse 
        i <- NULL
        ## how to 'set' the matrix
        set <- function(y) {                   
                x <<- y                             
                i <<- NULL                       
        }
        ## how to 'get' the matrix
        get <- function() x                     
        
        ## how to 'set' the inverse of the matrix
        setinverse <- function(inverse) i <<- inverse 
        
        ## how to 'get' the inverse of the matrix
        getinverse <- function() i                     
        
        ## return a list
        list(set = set, get = get, 
             setinverse = setinverse, 
             getinverse = getinverse)  
}

## This function computes the inverse of the special "matrix" returned by makeCacheMatrix above. 
## If the inverse has already been calculated (and the matrix has not changed), 
## then cacheSolve should retrieve the inverse from the cache.

cacheSolve <- function(x, ...) {
        ## Return a matrix that is the inverse of 'x'
        inv <- x$getinverse()
        if(!is.null(inv)) {
                message("getting cached data")
                return(inv)
        }
        data <- x$get()
        ## Computing the inverse of a square matrix can be done with the solve function in R. 
        ## For example, if X is a square invertible matrix, then solve(X) returns its inverse.
        inv <- solve(data, ...)
        x$setinverse(inv)
        inv
}
